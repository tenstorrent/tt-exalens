<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- CONTAINERS -->

  <!-- std::vector<bool> -->
  <Type Name="std::__1::vector&lt;bool,*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__size_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__size_</Item>
      <Item Name="[capacity]">__cap_alloc_.__value_ * __bits_per_word</Item>
      <IndexListItems>
        <Size>__size_</Size>
        <ValueNode>
          ((__begin_[($i / __bits_per_word)] &gt;&gt; ($i % __bits_per_word)) &amp; 1) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>
  <Type Name="std::vector&lt;bool,*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={(_M_impl._M_finish._M_p - _M_impl._M_start._M_p) * sizeof(std::_Bit_type) * 8 - _M_impl._M_start._M_offset + _M_impl._M_finish._M_offset} }}</DisplayString>
    <Expand>
      <Item Name="[size]">(_M_impl._M_finish._M_p - _M_impl._M_start._M_p) * sizeof(std::_Bit_type) * 8 - _M_impl._M_start._M_offset + _M_impl._M_finish._M_offset</Item>
      <Item Name="[capacity]">(_M_impl._M_finish._M_p - _M_impl._M_start._M_p + 1) * sizeof(std::_Bit_type) * 8</Item>
      <IndexListItems>
        <Size>(_M_impl._M_finish._M_p - _M_impl._M_start._M_p) * sizeof(std::_Bit_type) * 8 - _M_impl._M_start._M_offset + _M_impl._M_finish._M_offset</Size>
        <ValueNode>
          ((_M_impl._M_start._M_p[(($i + _M_impl._M_start._M_offset) / (sizeof(std::_Bit_type) * 8))] &gt;&gt; (($i + _M_impl._M_start._M_offset) % (sizeof(std::_Bit_type) * 8))) &amp; 1) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <!-- std::vector<T> -->
  <Type Name="std::__1::vector&lt;*&gt;" Priority="Medium" Inheritable="false"> <!-- libc++ -->
    <DisplayString>{{ size={__end_ - __begin_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__end_ - __begin_</Item>
      <Item Name="[capacity]">__end_cap_.__value_ - __begin_</Item>
      <ArrayItems>
        <Size>__end_ - __begin_</Size>
        <ValuePointer>__begin_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="std::vector&lt;*&gt;" Priority="Medium" Inheritable="false"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_impl._M_finish - _M_impl._M_start} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_impl._M_finish - _M_impl._M_start</Item>
      <Item Name="[capacity]">_M_impl._M_end_of_storage - _M_impl._M_start</Item>
      <ArrayItems>
        <Size>_M_impl._M_finish - _M_impl._M_start</Size>
        <ValuePointer>($T1*)_M_impl._M_start</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- std::array<T, Size> -->
  <Type Name="std::__1::array&lt;*,*&gt;"> <!-- libc++ -->
    <DisplayString>{{ size={$T2} }}</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>$T2</Size>
        <ValuePointer>__elems_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="std::array&lt;*,*&gt;"> <!-- libstdc++ -->
    <DisplayString>{{ size={$T2} }}</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>$T2</Size>
        <ValuePointer>_M_elems</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- TODO: std::deque<T> -->
  <Type Name="std::__1::deque&lt;*&gt;" Priority="High">
    <DisplayString>{{ size={__size_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__size_.__value_</Item>
      <IndexListItems>
        <Size>__size_.__value_</Size>
        <ValueNode>
          <!-- Simplified deque access - actual implementation is more complex -->
          *(__map_.__begin_ + (__start_ + $i) / __block_size)[(__start_ + $i) % __block_size]
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <!-- std::list<T> -->
  <Type Name="std::__1::list&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__size_alloc_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__size_alloc_.__value_</Item>
      <LinkedListItems>
        <Size>__size_alloc_.__value_</Size>
        <HeadPointer>__end_.__next_</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode>($T1*)((*this)+1)</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="std::__cxx11::list&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_impl._M_node._M_size} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_impl._M_node._M_size</Item>
      <LinkedListItems>
        <Size>_M_impl._M_node._M_size</Size>
        <HeadPointer>_M_impl._M_node._M_next</HeadPointer>
        <NextPointer>_M_next</NextPointer>
        <ValueNode>*(($T1*)&amp;(((std::__cxx11::list&lt;$T1,$T2&gt;::_Node*)this)._M_storage._M_storage))</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <!-- TODO: std::forward_list<T> -->
  <Type Name="std::__1::forward_list&lt;*&gt;" Priority="High">
    <DisplayString>forward_list</DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>__before_begin_.__value_.__next_</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode>__value_</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <!-- std::map<K,V> -->
  <Type Name="std::__1::map&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__tree_.__pair3_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__tree_.__pair3_.__value_</Item>
      <TreeItems>
        <Size>__tree_.__pair3_.__value_</Size>
        <HeadPointer>(std::__1::map&lt;$T1,$T2,$T3,$T4&gt;::__base::__node_pointer)(__tree_.__pair1_.__value_.__left_)</HeadPointer>
        <LeftPointer>__left_</LeftPointer>
        <RightPointer>__right_</RightPointer>
        <ValueNode>__value_.__cc_</ValueNode>
      </TreeItems>
    </Expand>
  </Type>
  <Type Name="std::map&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_t._M_impl._M_node_count} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_t._M_impl._M_node_count</Item>
      <TreeItems>
        <Size>_M_t._M_impl._M_node_count</Size>
        <HeadPointer>_M_t._M_impl._M_header._M_parent</HeadPointer>
        <LeftPointer>_M_left</LeftPointer>
        <RightPointer>_M_right</RightPointer>
        <ValueNode>(std::map&lt;$T1,$T2,$T3,$T4&gt;::value_type*)((*this)+1)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>
  <Type Name="std::map&lt;*&gt;::value_type" Priority="High"> <!-- libstdc++ -->
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="first">first</Item>
      <Item Name="second">second</Item>
    </Expand>
  </Type>

  <!-- TODO: std::multimap<K,V> -->
  <Type Name="std::__1::multimap&lt;*&gt;" Priority="High">
    <DisplayString>{{ size={__tree_.__pair3_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__tree_.__pair3_.__value_</Item>
      <TreeItems>
        <Size>__tree_.__pair3_.__value_</Size>
        <HeadPointer>__tree_.__begin_node_</HeadPointer>
        <LeftPointer>__left_</LeftPointer>
        <RightPointer>__right_</RightPointer>
        <ValueNode Name="[{__value_.__cc.first}]">__value_.__cc.second</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <!-- std::set<T> -->
  <Type Name="std::__1::set&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__tree_.__pair3_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__tree_.__pair3_.__value_</Item>
      <TreeItems>
        <Size>__tree_.__pair3_.__value_</Size>
        <HeadPointer>(std::__1::set&lt;$T1,$T2,$T3&gt;::__base::__node_pointer)(__tree_.__pair1_.__value_.__left_)</HeadPointer>
        <LeftPointer>__left_</LeftPointer>
        <RightPointer>__right_</RightPointer>
        <ValueNode>($T1)__value_</ValueNode>
      </TreeItems>
    </Expand>
  </Type>
  <Type Name="std::set&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_t._M_impl._M_node_count} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_t._M_impl._M_node_count</Item>
      <TreeItems>
        <Size>_M_t._M_impl._M_node_count</Size>
        <HeadPointer>_M_t._M_impl._M_header._M_parent</HeadPointer>
        <LeftPointer>_M_left</LeftPointer>
        <RightPointer>_M_right</RightPointer>
        <ValueNode>($T1*)((*this)+1)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <!-- TODO: std::multiset<T> -->
  <Type Name="std::__1::multiset&lt;*&gt;" Priority="High">
    <DisplayString>{{ size={__tree_.__pair3_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__tree_.__pair3_.__value_</Item>
      <TreeItems>
        <Size>__tree_.__pair3_.__value_</Size>
        <HeadPointer>__tree_.__begin_node_</HeadPointer>
        <LeftPointer>__left_</LeftPointer>
        <RightPointer>__right_</RightPointer>
        <ValueNode>__value_</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <!-- std::unordered_map<K,V> -->
  <Type Name="std::__1::unordered_map&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__table_.__p2_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__table_.__p2_.__value_</Item>
      <Item Name="[bucket_count]">__table_.__p3_.__value_</Item>
      <LinkedListItems>
        <Size>__table_.__p2_.__value_</Size>
        <HeadPointer>(std::__1::unordered_map&lt;$T1,$T2,$T3,$T4,$T5&gt;::__table::__node_pointer)(__table_.__p1_.__value_.__next_)</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode>__value_.__cc_</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="std::unordered_map&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_h._M_element_count} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_h._M_element_count</Item>
      <Item Name="[bucket_count]">_M_h._M_bucket_count</Item>
      <LinkedListItems>
        <Size>_M_h._M_element_count</Size>
        <HeadPointer>(std::unordered_map&lt;$T1,$T2,$T3,$T4,$T5&gt;::_Hashtable::__node_type*)(_M_h._M_before_begin._M_nxt)</HeadPointer>
        <NextPointer>_M_nxt</NextPointer>
        <ValueNode>*((std::unordered_map&lt;$T1,$T2,$T3,$T4,$T5&gt;::_Hashtable::value_type*)(_M_storage._M_storage.__data))</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="std::_Hashtable&lt;*&gt;::value_type" Priority="High"> <!-- libstdc++ -->
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="first">first</Item>
      <Item Name="second">second</Item>
    </Expand>
  </Type>

  <!-- TODO: std::unordered_multimap<K,V> -->
  <Type Name="std::__1::unordered_multimap&lt;*&gt;" Priority="High">
    <DisplayString>{{ size={__table_.__p2_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__table_.__p2_.__value_</Item>
      <Item Name="[bucket_count]">__table_.__p3_.__value_</Item>
      <LinkedListItems>
        <Size>__table_.__p2_.__value_</Size>
        <HeadPointer>__table_.__p1_.__value_.__next_</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode Name="[{__value_.__cc.first}]">__value_.__cc.second</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <!-- std::unordered_set<T> -->
  <Type Name="std::__1::unordered_set&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>{{ size={__table_.__p2_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__table_.__p2_.__value_</Item>
      <Item Name="[bucket_count]">__table_.__p3_.__value_</Item>
      <LinkedListItems>
        <Size>__table_.__p2_.__value_</Size>
        <HeadPointer>(std::__1::unordered_set&lt;$T1,$T2,$T3,$T4&gt;::__table::__node_pointer)(__table_.__p1_.__value_.__next_)</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode>($T1)__value_</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="std::unordered_set&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>{{ size={_M_h._M_element_count} }}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_h._M_element_count</Item>
      <Item Name="[bucket_count]">_M_h._M_bucket_count</Item>
      <LinkedListItems>
        <Size>_M_h._M_element_count</Size>
        <HeadPointer>(std::unordered_set&lt;$T1,$T2,$T3,$T4&gt;::_Hashtable::__node_type*)(_M_h._M_before_begin._M_nxt)</HeadPointer>
        <NextPointer>_M_nxt</NextPointer>
        <ValueNode>*(($T1*)(_M_storage._M_storage.__data))</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <!-- TODO: std::unordered_multiset<T> -->
  <Type Name="std::__1::unordered_multiset&lt;*&gt;" Priority="High">
    <DisplayString>{{ size={__table_.__p2_.__value_} }}</DisplayString>
    <Expand>
      <Item Name="[size]">__table_.__p2_.__value_</Item>
      <Item Name="[bucket_count]">__table_.__bucket_list_.__ptr_.__value_</Item>
      <LinkedListItems>
        <Size>__table_.__p2_.__value_</Size>
        <HeadPointer>__table_.__p1_.__value_.__next_</HeadPointer>
        <NextPointer>__next_</NextPointer>
        <ValueNode>__value_</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <!-- std::__1::__hash_value_type<T1,T2>::value_type -->
  <Type Name="std::__1::__hash_value_type&lt;*&gt;::value_type" Priority="High">
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="first">first</Item>
      <Item Name="second">second</Item>
    </Expand>
  </Type>

  <!-- std::__1::__value_type<T1,T2>::value_type -->
  <Type Name="std::__1::__value_type&lt;*&gt;::value_type" Priority="High">
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="first">first</Item>
      <Item Name="second">second</Item>
    </Expand>
  </Type>

  <!-- std::pair<T1,T2> -->
  <Type Name="std::__1::pair&lt;*&gt;" Priority="High">
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="first">first</Item>
      <Item Name="second">second</Item>
    </Expand>
  </Type>

  <!-- std::bitset<N> -->
  <Type Name="std::__1::bitset&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString>bitset&lt;{$T1}&gt;</DisplayString>
    <Expand>
      <Item Name="[size]">$T1</Item>
      <Item Name="[capacity]">__bits_per_word * __n_words</Item>
      <IndexListItems>
        <Size>$T1</Size>
        <ValueNode Condition="$T1 &lt; (__bits_per_word + 1)">
          ((__first_ &gt;&gt; ($i % __bits_per_word)) &amp; 1) != 0
        </ValueNode>
        <ValueNode Condition="$T1 &gt; __bits_per_word">
          ((__first_[($i / __bits_per_word)] &gt;&gt; ($i % __bits_per_word)) &amp; 1) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>
  <Type Name="std::bitset&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString>bitset&lt;{$T1}&gt;</DisplayString>
    <Expand>
      <Item Name="[size]">$T1</Item>
      <Item Name="[capacity]">sizeof(_M_w) * 8</Item>
      <IndexListItems>
        <Size>$T1</Size>
        <ValueNode Condition="$T1 &lt; (sizeof(std::bitset&lt;$T1&gt;::_WordT) * 8 + 1)">
          (_M_w &gt;&gt; ($i % (sizeof(std::bitset&lt;$T1&gt;::_WordT) * 8)) &amp; 1) != 0
        </ValueNode>
        <ValueNode Condition="$T1 &gt; sizeof(std::bitset&lt;$T1&gt;::_WordT) * 8">
          ((_M_w[($i / (sizeof(std::bitset&lt;$T1&gt;::_WordT) * 8))] &gt;&gt; ($i % (sizeof(std::bitset&lt;$T1&gt;::_WordT) * 8))) &amp; 1) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <!-- CONTAINER ADAPTERS -->

  <!-- TODO: std::stack<T> -->
  <Type Name="std::__1::stack&lt;*&gt;" Priority="High">
    <DisplayString>stack</DisplayString>
    <Expand>
      <ExpandedItem>c</ExpandedItem>
    </Expand>
  </Type>

  <!-- TODO: std::queue<T> -->
  <Type Name="std::__1::queue&lt;*&gt;" Priority="High">
    <DisplayString>queue</DisplayString>
    <Expand>
      <ExpandedItem>c</ExpandedItem>
    </Expand>
  </Type>

  <!-- TODO: std::priority_queue<T> -->
  <Type Name="std::__1::priority_queue&lt;*&gt;" Priority="High">
    <DisplayString>priority_queue</DisplayString>
    <Expand>
      <ExpandedItem>c</ExpandedItem>
    </Expand>
  </Type>

  <!-- STRINGS -->

  <!-- std::filesystem::path -->
  <Type Name="std::__1::__fs::filesystem::path" Priority="High">
    <DisplayString Condition="(__pn_.__r_.__value_.__s.__is_long_) == 0">{&amp;__pn_.__r_.__value_.__s.__data_,s8}</DisplayString>
    <DisplayString Condition="(__pn_.__r_.__value_.__s.__is_long_) != 0">{__pn_.__r_.__value_.__l.__data_,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" Condition="(__pn_.__r_.__value_.__s.__is_long_) == 0">__pn_.__r_.__value_.__s.__size_</Item>
      <Item Name="[size]" Condition="(__pn_.__r_.__value_.__s.__is_long_) != 0">__pn_.__r_.__value_.__l.__size_</Item>
      <Item Name="[capacity]" Condition="(__pn_.__r_.__value_.__s.__is_long_) == 0">sizeof(__pn_.__r_.__value_.__s.__data_) - 1</Item>
      <Item Name="[capacity]" Condition="(__pn_.__r_.__value_.__s.__is_long_) != 0">__pn_.__r_.__value_.__l.__cap_ * 2 - 1</Item>
    </Expand>
  </Type>

  <!-- std::string (alias for std::basic_string<char>) -->
  <Type Name="std::__1::string" Priority="High">
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) == 0">{&amp;__r_.__value_.__s.__data_,s8}</DisplayString>
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) != 0">{__r_.__value_.__l.__data_,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) == 0">__r_.__value_.__s.__size_</Item>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__size_</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) == 0">sizeof(__r_.__value_.__s.__data_) - 1</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__cap_ * 2 - 1</Item>
    </Expand>
  </Type>
  <Type Name="std::string" Priority="High"> <!-- libstdc++ -->
    <DisplayString Condition="_M_string_length &lt; 16">{_M_local_buf,s8}</DisplayString>
    <DisplayString Condition="_M_string_length &gt; 15">{((char**)&amp;_M_dataplus)[0],s8}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_string_length</Item>
      <Item Name="[capacity]" Condition="_M_string_length &lt; 16">15</Item>
      <Item Name="[capacity]" Condition="_M_string_length &gt; 15">_M_allocated_capacity</Item>
    </Expand>
  </Type>

  <!-- std::basic_string<char> -->
  <Type Name="std::__1::basic_string&lt;char,*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) == 0">{&amp;__r_.__value_.__s.__data_,s8}</DisplayString>
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) != 0">{__r_.__value_.__l.__data_,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) == 0">__r_.__value_.__s.__size_</Item>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__size_</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) == 0">sizeof(__r_.__value_.__s.__data_) - 1</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__cap_ * 2 - 1</Item>
    </Expand>
  </Type>
  <Type Name="std::__cxx11::basic_string&lt;char,*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString Condition="_M_string_length &lt; 16">{_M_local_buf,s8}</DisplayString>
    <DisplayString Condition="_M_string_length &gt; 15">{((char**)&amp;_M_dataplus)[0],s8}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_string_length</Item>
      <Item Name="[capacity]" Condition="_M_string_length &lt; 16">15</Item>
      <Item Name="[capacity]" Condition="_M_string_length &gt; 15">_M_allocated_capacity</Item>
    </Expand>
  </Type>

  <!-- std::wstring (alias for std::basic_string<wchar_t>) -->
  <Type Name="std::__1::wstring" Priority="High">
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) == 0">{&amp;__r_.__value_.__s.__data_,s32}</DisplayString>
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) != 0">{__r_.__value_.__l.__data_,s32}</DisplayString>
    <Expand>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) == 0">__r_.__value_.__s.__size_</Item>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__size_</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) == 0">sizeof(__r_.__value_.__s.__data_) - 1</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__cap_ * 2 - 1</Item>
    </Expand>
  </Type>
  <Type Name="std::wstring" Priority="High"> <!-- libstdc++ -->
    <DisplayString Condition="_M_string_length &lt; 4">{_M_local_buf,s32}</DisplayString>
    <DisplayString Condition="_M_string_length &gt; 3">{(*(wchar_t**)&amp;_M_dataplus),s32}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_string_length</Item>
      <Item Name="[capacity]" Condition="_M_string_length &lt; 4">3</Item>
      <Item Name="[capacity]" Condition="_M_string_length &gt; 3">_M_allocated_capacity</Item>
    </Expand>
  </Type>

  <!-- std::basic_string<wchar_t> -->
  <Type Name="std::__1::basic_string&lt;wchar_t,*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) == 0">{&amp;__r_.__value_.__s.__data_,s32}</DisplayString>
    <DisplayString Condition="(__r_.__value_.__s.__is_long_) != 0">{__r_.__value_.__l.__data_,s32}</DisplayString>
    <Expand>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) == 0">__r_.__value_.__s.__size_</Item>
      <Item Name="[size]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__size_</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) == 0">sizeof(__r_.__value_.__s.__data_) - 1</Item>
      <Item Name="[capacity]" Condition="(__r_.__value_.__s.__is_long_) != 0">__r_.__value_.__l.__cap_ * 2 - 1</Item>
    </Expand>
  </Type>
  <Type Name="std::__cxx11::basic_string&lt;wchar_t,*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString Condition="_M_string_length &lt; 4">{_M_local_buf,s32}</DisplayString>
    <DisplayString Condition="_M_string_length &gt; 3">{(*(wchar_t**)&amp;_M_dataplus),s32}</DisplayString>
    <Expand>
      <Item Name="[size]">_M_string_length</Item>
      <Item Name="[capacity]" Condition="_M_string_length &lt; 4">3</Item>
      <Item Name="[capacity]" Condition="_M_string_length &gt; 3">_M_allocated_capacity</Item>
    </Expand>
  </Type>

  <!-- std::string_view -->
  <Type Name="std::__1::string_view" Priority="High"> <!-- libc++ -->
    <!-- <DisplayString>{__data_,[__size_]s8}</DisplayString> -->
    <DisplayString>{__data_,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__size_</Item>
      <ArrayItems>
        <Size>__size_</Size>
        <ValuePointer>__data_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="std::string_view" Priority="High"> <!-- libstdc++ -->
    <!-- <DisplayString>{_M_str,[_M_len]s8}</DisplayString> -->
    <DisplayString>{_M_str,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">_M_len</Item>
      <ArrayItems>
        <Size>_M_len</Size>
        <ValuePointer>_M_str</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- std::basic_string_view -->
  <Type Name="std::__1::basic_string_view&lt;*,*&gt;" Priority="High"> <!-- libc++ -->
    <!-- <DisplayString>{__data_,[__size_]s8}</DisplayString> -->
    <DisplayString>{__data_,s8}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__size_</Item>
      <ArrayItems>
        <Size>__size_</Size>
        <ValuePointer>__data_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="std::wstring_view" Priority="High"> <!-- libstdc++ -->
    <!-- <DisplayString>{_M_str,[_M_len]s32}</DisplayString> -->
    <DisplayString>{_M_str,s32}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">_M_len</Item>
      <ArrayItems>
        <Size>_M_len</Size>
        <ValuePointer>_M_str</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- std::wstring_view -->
  <Type Name="std::__1::wstring_view" Priority="High">
    <!-- <DisplayString>{__data_,[__size_]s32}</DisplayString> -->
    <DisplayString>{__data_,s32}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__size_</Item>
      <ArrayItems>
        <Size>__size_</Size>
        <ValuePointer>__data_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- TODO: std::basic_wstring_view -->
  <Type Name="std::__1::basic_wstring_view&lt;*,*&gt;" Priority="High">
    <!-- <DisplayString>{__data_,[__size_]s32}</DisplayString> -->
    <DisplayString>{__data_,s32}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">__size_</Item>
      <ArrayItems>
        <Size>__size_</Size>
        <ValuePointer>__data_</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- SMART POINTERS -->

  <!-- std::unique_ptr<T> -->
  <Type Name="std::__1::unique_ptr&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <SmartPointer Usage="Minimal">__ptr_.__value_</SmartPointer>
    <DisplayString Condition="__ptr_.__value_ == 0">empty</DisplayString>
    <DisplayString Condition="__ptr_.__value_ != 0">unique_ptr {*__ptr_.__value_}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="__ptr_.__value_ != 0">*__ptr_.__value_</Item>
    </Expand>
  </Type>
  <Type Name="std::unique_ptr&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <SmartPointer Usage="Minimal">_M_t._M_t._M_head_impl</SmartPointer>
    <DisplayString Condition="*(($T1**)this) == 0">empty</DisplayString>
    <DisplayString Condition="*(($T1**)this) != 0">unique_ptr {*(*(($T1**)this))}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="*(($T1**)this) != 0">*(*(($T1**)this))</Item>
    </Expand>
  </Type>

  <!-- TODO: std::shared_ptr<T> -->
  <Type Name="std::__1::shared_ptr&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <SmartPointer Usage="Minimal">__ptr_</SmartPointer>
    <DisplayString Condition="__ptr_ == 0">empty</DisplayString>
    <DisplayString Condition="__cntrl_ == 0">empty</DisplayString>
    <DisplayString>shared_ptr {{ ptr={__ptr_}, use_count={__cntrl_.__shared_owners_ + 1}, weak_count={__cntrl_.__shared_weak_owners_} }}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="__ptr_ != 0">*(($T1*)__ptr_)</Item>
      <Item Name="[use_count]" Condition="__cntrl_ != 0">__cntrl_.__shared_owners_ + 1</Item>
      <Item Name="[weak_count]" Condition="__cntrl_ != 0">__cntrl_.__shared_weak_owners_</Item>
      <Item Name="[control_block]" Condition="__cntrl_ != 0">*__cntrl_</Item>
    </Expand>
  </Type>
  <Type Name="std::shared_ptr&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <SmartPointer Usage="Minimal">_M_ptr</SmartPointer>
    <DisplayString Condition="_M_ptr == 0">empty</DisplayString>
    <DisplayString Condition="_M_ptr != 0">shared_ptr {{ ptr={_M_ptr}, use_count={_M_refcount._M_pi._M_use_count}, weak_count={_M_refcount._M_pi._M_weak_count} }}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="_M_ptr != 0">*(($T1*)_M_ptr)</Item>
      <Item Name="[use_count]" Condition="_M_refcount._M_pi != 0">_M_refcount._M_pi._M_use_count</Item>
      <Item Name="[weak_count]" Condition="_M_refcount._M_pi != 0">_M_refcount._M_pi._M_weak_count</Item>
      <Item Name="[control_block]" Condition="_M_refcount._M_pi != 0">*_M_refcount._M_pi</Item>
    </Expand>
  </Type>

  <!-- std::weak_ptr<T> -->
  <Type Name="std::__1::weak_ptr&lt;*&gt;" Priority="High">
    <DisplayString Condition="__ptr_ == 0">empty</DisplayString>
    <DisplayString Condition="__cntrl_ == 0">empty</DisplayString>
    <DisplayString>weak_ptr {{ ptr={__ptr_}, use_count={__cntrl_.__shared_owners_ + 1}, weak_count={__cntrl_.__shared_weak_owners_} }}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="__ptr_ != 0">*(($T1*)__ptr_)</Item>
      <Item Name="[use_count]" Condition="__cntrl_ != 0">__cntrl_.__shared_owners_ + 1</Item>
      <Item Name="[weak_count]" Condition="__cntrl_ != 0">__cntrl_.__shared_weak_owners_</Item>
      <Item Name="[control_block]" Condition="__cntrl_ != 0">*__cntrl_</Item>
    </Expand>
  </Type>
  <Type Name="std::weak_ptr&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <SmartPointer Usage="Minimal">_M_ptr</SmartPointer>
    <DisplayString Condition="_M_ptr == 0">empty</DisplayString>
    <DisplayString Condition="_M_ptr != 0">weak_ptr {{ ptr={_M_ptr}, use_count={_M_refcount._M_pi._M_use_count}, weak_count={_M_refcount._M_pi._M_weak_count} }}</DisplayString>
    <Expand>
      <Item Name="[ptr]" Condition="_M_ptr != 0">*(($T1*)_M_ptr)</Item>
      <Item Name="[use_count]" Condition="_M_refcount._M_pi != 0">_M_refcount._M_pi._M_use_count</Item>
      <Item Name="[weak_count]" Condition="_M_refcount._M_pi != 0">_M_refcount._M_pi._M_weak_count</Item>
      <Item Name="[control_block]" Condition="_M_refcount._M_pi != 0">*_M_refcount._M_pi</Item>
    </Expand>
  </Type>

  <!-- TUPLES AND OPTIONAL -->

  <!-- std::tuple<> (empty tuple) -->
  <Type Name="std::__1::tuple&lt;&gt;" Priority="High">
    <DisplayString IncludeView="noparens">empty</DisplayString>
    <DisplayString ExcludeView="noparens">empty tuple</DisplayString>
    <Expand/>
  </Type>

  <!-- std::tuple<T1,T2,T3,T4,T5...> -->
  <Type Name="std::__1::tuple&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <Expand>
      <Item Name="[0]" Optional="true" Condition="sizeof($T1) != sizeof(void)">((std::__1::__tuple_leaf&lt;0ul,$T1,false&gt;)__base_).__value_</Item>
      <Item Name="[1]" Optional="true" Condition="sizeof($T2) != sizeof(void)">((std::__1::__tuple_leaf&lt;1ul,$T2,false&gt;)__base_).__value_</Item>
      <Item Name="[2]" Optional="true" Condition="sizeof($T3) != sizeof(void)">((std::__1::__tuple_leaf&lt;2ul,$T3,false&gt;)__base_).__value_</Item>
      <Item Name="[3]" Optional="true" Condition="sizeof($T4) != sizeof(void)">((std::__1::__tuple_leaf&lt;3ul,$T4,false&gt;)__base_).__value_</Item>
      <Item Name="[4]" Optional="true" Condition="sizeof($T5) != sizeof(void)">((std::__1::__tuple_leaf&lt;4ul,$T5,false&gt;)__base_).__value_</Item>
      <Item Name="[5]" Optional="true" Condition="sizeof($T6) != sizeof(void)">((std::__1::__tuple_leaf&lt;5ul,$T6,false&gt;)__base_).__value_</Item>
      <Item Name="[6]" Optional="true" Condition="sizeof($T7) != sizeof(void)">((std::__1::__tuple_leaf&lt;6ul,$T7,false&gt;)__base_).__value_</Item>
      <Item Name="[7]" Optional="true" Condition="sizeof($T8) != sizeof(void)">((std::__1::__tuple_leaf&lt;7ul,$T8,false&gt;)__base_).__value_</Item>
      <Item Name="[8]" Optional="true" Condition="sizeof($T9) != sizeof(void)">((std::__1::__tuple_leaf&lt;8ul,$T9,false&gt;)__base_).__value_</Item>
      <Item Name="[9]" Optional="true" Condition="sizeof($T10) != sizeof(void)">((std::__1::__tuple_leaf&lt;9ul,$T10,false&gt;)__base_).__value_</Item>
    </Expand>
  </Type>
  <Type Name="std::tuple&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <Expand>
      <Item Name="[0]" Optional="true" Condition="sizeof($T1) != sizeof(void)">*(($T1*)((std::_Head_base&lt;0ul,$T1,false&gt;*)this))</Item>
      <Item Name="[1]" Optional="true" Condition="sizeof($T2) != sizeof(void)">*(($T2*)((std::_Head_base&lt;1ul,$T2,false&gt;*)this))</Item>
      <Item Name="[2]" Optional="true" Condition="sizeof($T3) != sizeof(void)">*(($T3*)((std::_Head_base&lt;2ul,$T3,false&gt;*)this))</Item>
      <Item Name="[3]" Optional="true" Condition="sizeof($T4) != sizeof(void)">*(($T4*)((std::_Head_base&lt;3ul,$T4,false&gt;*)this))</Item>
      <Item Name="[4]" Optional="true" Condition="sizeof($T5) != sizeof(void)">*(($T5*)((std::_Head_base&lt;4ul,$T5,false&gt;*)this))</Item>
      <Item Name="[5]" Optional="true" Condition="sizeof($T6) != sizeof(void)">*(($T6*)((std::_Head_base&lt;5ul,$T6,false&gt;*)this))</Item>
      <Item Name="[6]" Optional="true" Condition="sizeof($T7) != sizeof(void)">*(($T7*)((std::_Head_base&lt;6ul,$T7,false&gt;*)this))</Item>
      <Item Name="[7]" Optional="true" Condition="sizeof($T8) != sizeof(void)">*(($T8*)((std::_Head_base&lt;7ul,$T8,false&gt;*)this))</Item>
      <Item Name="[8]" Optional="true" Condition="sizeof($T9) != sizeof(void)">*(($T9*)((std::_Head_base&lt;8ul,$T9,false&gt;*)this))</Item>
      <Item Name="[9]" Optional="true" Condition="sizeof($T10) != sizeof(void)">*(($T10*)((std::_Head_base&lt;9ul,$T10,false&gt;*)this))</Item>
    </Expand>
  </Type>

  <!-- TODO: std::nullopt_t -->
  <Type Name="std::__1::nullopt_t" Priority="High">
    <DisplayString>std::nullopt</DisplayString>
  </Type>

  <!-- std::optional<T> -->
  <Type Name="std::__1::optional&lt;*&gt;" Priority="High"> <!-- libc++ -->
    <DisplayString Condition="!__engaged_">std::nullopt</DisplayString>
    <DisplayString Condition="__engaged_">{($T1)__val_}</DisplayString>
    <Expand>
      <Item Name="[value]" Condition="__engaged_">($T1)__val_</Item>
      <Item Name="[has_value]">__engaged_</Item>
    </Expand>
  </Type>
  <Type Name="std::optional&lt;*&gt;" Priority="High"> <!-- libstdc++ -->
    <DisplayString Condition="!_M_payload._M_engaged">std::nullopt</DisplayString>
    <DisplayString Condition="_M_payload._M_engaged">{_M_payload._M_payload._M_value}</DisplayString>
    <Expand>
      <Item Name="[value]" Condition="_M_payload._M_engaged">_M_payload._M_payload._M_value</Item>
      <Item Name="[has_value]">_M_payload._M_engaged</Item>
    </Expand>
  </Type>

  <!-- TODO: std::variant -->
  <Type Name="std::__1::variant&lt;*&gt;" Priority="High">
    <Intrinsic Name="index" Expression="(int)__impl.__index"/>
    <DisplayString Condition="index() &lt; 0">[valueless_by_exception]</DisplayString>
    <DisplayString Condition="index() == 0" Optional="true">{{ #{index()}, value={__impl.__data.__head.__value} }}</DisplayString>
    <DisplayString Condition="index() == 1" Optional="true">{{ #{index()}, value={__impl.__data.__tail.__head.__value} }}</DisplayString>
    <DisplayString Condition="index() == 2" Optional="true">{{ #{index()}, value={__impl.__data.__tail.__tail.__head.__value} }}</DisplayString>
    <DisplayString Condition="index() == 3" Optional="true">{{ #{index()}, value={__impl.__data.__tail.__tail.__tail.__head.__value} }}</DisplayString>
    <DisplayString Condition="index() == 4" Optional="true">{{ #{index()}, value={__impl.__data.__tail.__tail.__tail.__tail.__head.__value} }}</DisplayString>
    <DisplayString Condition="index() == 5" Optional="true">{{ #{index()}, value={__impl.__data.__tail.__tail.__tail.__tail.__tail.__head.__value} }}</DisplayString>
    <Expand>
      <Item Name="[index]">index()</Item>
      <Item Name="[value]" Condition="index() == 0" Optional="true">__impl.__data.__head.__value</Item>
      <Item Name="[value]" Condition="index() == 1" Optional="true">__impl.__data.__tail.__head.__value</Item>
      <Item Name="[value]" Condition="index() == 2" Optional="true">__impl.__data.__tail.__tail.__head.__value</Item>
      <Item Name="[value]" Condition="index() == 3" Optional="true">__impl.__data.__tail.__tail.__tail.__head.__value</Item>
      <Item Name="[value]" Condition="index() == 4" Optional="true">__impl.__data.__tail.__tail.__tail.__tail.__head.__value</Item>
      <Item Name="[value]" Condition="index() == 5" Optional="true">__impl.__data.__tail.__tail.__tail.__tail.__tail.__head.__value</Item>
    </Expand>
  </Type>

  <!-- ITERATORS -->

  <!-- TODO: std::vector::iterator (__wrap_iter) -->
  <Type Name="std::__1::__wrap_iter&lt;*&gt;" Priority="High">
    <DisplayString>{*__i}</DisplayString>
    <Expand>
      <Item Name="[ptr]">__i</Item>
      <Item Name="[value]">*__i</Item>
    </Expand>
  </Type>

  <!-- TODO: std::vector<bool>::iterator (__bit_iterator) -->
  <Type Name="std::__1::__bit_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{(__seg_ &amp; (1 &lt;&lt; __ctz_)) != 0}</DisplayString>
    <Expand>
      <Item Name="[segment]">__seg_</Item>
      <Item Name="[offset]">__ctz_</Item>
      <Item Name="[value]">(__seg_ &amp; (1 &lt;&lt; __ctz_)) != 0</Item>
    </Expand>
  </Type>

  <!-- TODO: std::list::iterator -->
  <Type Name="std::__1::__list_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__ptr_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__ptr_</Item>
      <Item Name="[value]">__ptr_->__value_</Item>
    </Expand>
  </Type>

  <Type Name="std::__1::__list_const_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__ptr_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__ptr_</Item>
      <Item Name="[value]">__ptr_->__value_</Item>
    </Expand>
  </Type>

  <!-- TODO: std::deque::iterator -->
  <Type Name="std::__1::__deque_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{*__ptr_}</DisplayString>
    <Expand>
      <Item Name="[ptr]">__ptr_</Item>
      <Item Name="[value]">*__ptr_</Item>
    </Expand>
  </Type>

  <!-- TODO: std::map/set::iterator (__tree_iterator) -->
  <Type Name="std::__1::__tree_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__ptr_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__ptr_</Item>
      <Item Name="[value]">__ptr_->__value_</Item>
    </Expand>
  </Type>

  <Type Name="std::__1::__tree_const_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__ptr_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__ptr_</Item>
      <Item Name="[value]">__ptr_->__value_</Item>
    </Expand>
  </Type>

  <!-- TODO: std::map::iterator (__map_iterator) -->
  <Type Name="std::__1::__map_iterator&lt;*&gt;" Priority="High">
    <DisplayString>[{__i_.__ptr_->__value_.__cc.first}] = {__i_.__ptr_->__value_.__cc.second}</DisplayString>
    <Expand>
      <Item Name="[key]">__i_.__ptr_->__value_.__cc.first</Item>
      <Item Name="[value]">__i_.__ptr_->__value_.__cc.second</Item>
      <Item Name="[node]">__i_.__ptr_</Item>
    </Expand>
  </Type>

  <Type Name="std::__1::__map_const_iterator&lt;*&gt;" Priority="High">
    <DisplayString>[{__i_.__ptr_->__value_.__cc.first}] = {__i_.__ptr_->__value_.__cc.second}</DisplayString>
    <Expand>
      <Item Name="[key]">__i_.__ptr_->__value_.__cc.first</Item>
      <Item Name="[value]">__i_.__ptr_->__value_.__cc.second</Item>
      <Item Name="[node]">__i_.__ptr_</Item>
    </Expand>
  </Type>

  <!-- TODO: std::unordered_map/set::iterator (__hash_iterator) -->
  <Type Name="std::__1::__hash_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__node_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__node_</Item>
      <Item Name="[value]">__node_->__value_</Item>
    </Expand>
  </Type>

  <Type Name="std::__1::__hash_const_iterator&lt;*&gt;" Priority="High">
    <DisplayString>{__node_->__value_}</DisplayString>
    <Expand>
      <Item Name="[node]">__node_</Item>
      <Item Name="[value]">__node_->__value_</Item>
    </Expand>
  </Type>

  <!-- TODO: std::unordered_map::iterator (__hash_map_iterator) -->
  <Type Name="std::__1::__hash_map_iterator&lt;*&gt;" Priority="High">
    <DisplayString>[{__i_.__node_->__value_.__cc.first}] = {__i_.__node_->__value_.__cc.second}</DisplayString>
    <Expand>
      <Item Name="[key]">__i_.__node_->__value_.__cc.first</Item>
      <Item Name="[value]">__i_.__node_->__value_.__cc.second</Item>
      <Item Name="[node]">__i_.__node_</Item>
    </Expand>
  </Type>

  <Type Name="std::__1::__hash_map_const_iterator&lt;*&gt;" Priority="High">
    <DisplayString>[{__i_.__node_->__value_.__cc.first}] = {__i_.__node_->__value_.__cc.second}</DisplayString>
    <Expand>
      <Item Name="[key]">__i_.__node_->__value_.__cc.first</Item>
      <Item Name="[value]">__i_.__node_->__value_.__cc.second</Item>
      <Item Name="[node]">__i_.__node_</Item>
    </Expand>
  </Type>

</AutoVisualizer>
