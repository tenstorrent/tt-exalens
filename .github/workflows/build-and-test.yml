name: "Run all tests"

on:
  workflow_dispatch:
  workflow_call:

jobs:

  build-image:
    runs-on: tt-beta-ubuntu-2204-large
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
    steps:
      - name: Fix permissions
        shell: bash
        run: sudo chown ubuntu:ubuntu -R $(pwd)

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images and output the image name
        id: build
        shell: bash
        run: |
          # Output the image name
          set pipefail
          .github/build-docker-images.sh | tee docker.log
          DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
          echo "DOCKER_CI_IMAGE $DOCKER_CI_IMAGE"
          echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"

  build:
    needs: build-image
    uses: ./.github/workflows/build-ttexalens.yml
    with:
      docker-image: ${{ needs.build-image.outputs.docker-image }}

  set-latest:
    # Set the latest tag on the IRD image
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Set latest tag on the image
        run: |
          DOCKER_CI_IMAGE=${{ needs.build-image.outputs.docker-image }}
          DOCKER_TAG=$(echo $DOCKER_CI_IMAGE | sed 's/^.*://')
          CI_IMAGE_NAME=ghcr.io/${{ github.repository }}/tt-exalens-ci-ubuntu-22-04
          echo "Setting latest tag on the image $CI_IMAGE_NAME:$DOCKER_TAG"
          skopeo copy "docker://$CI_IMAGE_NAME:$DOCKER_TAG" "docker://$CI_IMAGE_NAME:latest"
          IRD_IMAGE_NAME=ghcr.io/${{ github.repository }}/tt-exalens-ird-ubuntu-22-04
          echo "Setting latest tag on the image $IRD_IMAGE_NAME:$DOCKER_TAG"
          skopeo copy "docker://$IRD_IMAGE_NAME:$DOCKER_TAG" "docker://$IRD_IMAGE_NAME:latest"

  build-and-run-unit-tests:
    needs:
      - build
      - build-image
    strategy:
      matrix:
        runner-info: [
          {arch: "blackhole", board: "p150a", runs-on: "tt-beta-ubuntu-2204-p150a-large-stable"},
          {arch: "wormhole_b0", board: "n150", runs-on: "tt-beta-ubuntu-2204-n150-large-stable"},
          {arch: "wormhole_b0", board: "n300", runs-on: "tt-beta-ubuntu-2204-n300-large-stable"},
        ]
    env:
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      CONFIG: ci
      # So we can get all the makefile output we want
      VERBOSE: 5
      LOGGER_LEVEL: INFO
    runs-on: ${{ matrix.runner-info.runs-on }}
    container:
      image: ${{ needs.build-image.outputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
    name: Build and run unit test on ${{ matrix.runner-info.arch }} ${{ matrix.runner-info.board }}
    steps:
      - name: Git safe dir
        run: git config --global --add safe.directory '*'

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: pyTooling/download-artifact@v4
        with:
          name: ttexalens-build

      - name: Set reusable strings
        id: strings
        shell: bash
        env:
          job-name: "Build and run unit test on ${{ matrix.runner-info.arch }} ${{ matrix.runner-info.board }}"
        run: |
          # Github job context unfortunately doesn't contain job_id, this is the workaround how to fetch it using GH API

          curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs" | \
            jq -r '.jobs[] | .name'

          echo "Expected job name: ${{ env.job-name }}"
          JOB_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs" | \
            jq -r '.jobs[] | select(.name | contains("${{ env.job-name }}")) | .id ')
          echo "Current job id: $JOB_ID"
          echo "job-id=$JOB_ID" >> "$GITHUB_OUTPUT"
          echo "test_report_path=report_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

      - name: Run C++ tests
        run: |
          make ttexalens_server_unit_tests_run_only

      - name: Run Python tests for ttexalens library
        run: |
          # Calling cmake configure for project located in ./ttexalens/riscv-src/ to fetch sfpi.
          cmake -S ./ttexalens/riscv-src/ -B build_tmp
          python3 -m xmlrunner discover -v -t . -s test/ttexalens -p '*test*.py' \
          --output-file ${{ steps.strings.outputs.test_report_path }}

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.runner-info.arch }}-${{ matrix.runner-info.board }}
          path: ${{ steps.strings.outputs.test_report_path }}

      - name: Run Python tests for TTExaLens app
        run: |
          python3 -m unittest discover -v -t . -s test/app -p *test*.py


  wheel-test:
    needs:
      - build
      - build-image
    strategy:
      matrix:
        runner-info: [
          {arch: "blackhole", board: "p150a", runs-on: "tt-beta-ubuntu-2204-p150a-large-stable"},
          {arch: "wormhole_b0", board: "n150", runs-on: "tt-beta-ubuntu-2204-n150-large-stable"},
          {arch: "wormhole_b0", board: "n300", runs-on: "tt-beta-ubuntu-2204-n300-large-stable"},
        ]
    env:
      ARCH_NAME: ${{ matrix.runner-info.arch }}
      CONFIG: ci
      # So we can get all the makefile output we want
      VERBOSE: 5
    runs-on: ${{ matrix.runner-info.runs-on }}
    container:
      image: ${{ needs.build-image.outputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
    name: Build, install wheel and test it on ${{ matrix.runner-info.arch }}
    steps:
      - name: Git safe dir
        run: git config --global --add safe.directory '*'

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: pyTooling/download-artifact@v4
        with:
          name: ttexalens-build
      - name: Install wheel
        run: |
          pip install build/ttexalens_wheel/*.whl
      - name: Run tests
        run: |
          # Change to the wheel tests directory so that we are certain we don't import dev files
          cd test/wheel
          ./run-wheel.sh
